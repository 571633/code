Basic infrastructure


    User A wants to send message “Hello Gainlo” to user B. A first send the message to the chat server.
    The chat server receives the message and sends an acknowledgement back to A, meaning the message is received. Based on the product, the front end may display a single check mark in A’s UI.
    Case 1: if B is online and connected to the chat server, that’s great. The chat server just sends the message to B.
    Case 2: If B is not online, the chat server sends a push notification to B.
    B receives the message and sends back an acknowledgement to the chat server.
    The chat server notifies A that B received the message and updates with a double check mark in A’s UI.


chat server might need to spawn an OS process/thread, initialize HTTP (maybe other protocol) request and close connection at the end

One solution is to use HTTP persistent connection. 
Each request will be re-established when it’s timed out or interrupt

Online notification
online friends
once a user is online, he sends a notification to all his friends.

O(average number of friends * peak users) of requests
issue notification only when this user reloads a page or sends a message

Or we won’t send notification until a user has been online for 5min. 
This solves the cases where a user shows online and immediately goes offline.
