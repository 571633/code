
lvalue, rvalue
An lvalue refers to an object that persists beyond a single expression. You can think of an lvalue as an object that has a name.
An rvalue is a temporary value that does not persist beyond the expression that uses it.
int x = 3 + 4;
In this example, x is an lvalue because it persists beyond the expression that defines it. The expression 3 + 4 is an rvalue because it evaluates to a temporary value that does not persist beyond the expression that defines it.

Unique pointer
A unique_ptr does not share its pointer. It cannot be copied to another unique_ptr, passed by value to a function, or used in any C++ Standard Library algorithm that requires copies to be made.
  std::unique_ptr<int> u3 (new int);

  The shared_ptr type is a smart pointer in the C++ standard library that is designed for scenarios in which more than one owner might have to manage the lifetime of the object in memory. After you initialize a shared_ptr you can copy it, pass it by value in function arguments, and assign it to other shared_ptr instances. All the instances point to the same object
