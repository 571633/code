Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

Example 1:

Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".

Example 2:

Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".

Example 3:

Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".

Example 4:

Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".

Note:

    1 <= S.length <= 200
    1 <= T.length <= 200
    S and T only contain lowercase letters and '#' characters.

Follow up:

    Can you solve it in O(N) time and O(1) space?


class Solution {
public:
    bool backspaceCompare(string S, string T) {
        stack<char> s, t;
        for(int i=0; i<S.size(); i++)
        {
            if(S[i] == '#')
            {
                if(!s.empty())
                    s.pop();
            }
            else
                s.push(S[i]);
        }
        
        for(int i=0; i<T.size(); i++)
        {
            if(T[i] == '#')
            {
                if(!t.empty())
                    t.pop();
            }
            else
                t.push(T[i]);
        }
        
        if(s.size() != t.size())
            return false;
            
        while(!s.empty())
        {
            if(s.top() != t.top())
                return false;
            s.pop();
            t.pop();
        }
        
        return true;
    }
};



class Solution {
public:
    bool backspaceCompare(string S, string T) {
        string s, t;
        for(int i=0; i<S.size(); i++)
        {
            if(S[i] == '#')
            {
                if(!s.empty())
                    s.pop_back();
            }
            else
                s.push_back(S[i]);
        }
        
        for(int i=0; i<T.size(); i++)
        {
            if(T[i] == '#')
            {
                if(!t.empty())
                    t.pop_back();
            }
            else
                t.push_back(T[i]);
        }
        
        return s == t;
    }
};


class Solution {
public:
    bool backspaceCompare(string S, string T) {

        int i = S.size() - 1, j = T.size() - 1;
        int cn1 = 0, cn2 = 0;
        
        while(i>=0 || j>=0)
        {
            while(i>=0 && (S[i]=='#' || cn1>0))
            {
                if(S[i] == '#')
                    cn1++;
                else
                    cn1--;
                i -- ;
            }
            while(j>=0 && (T[j]=='#' || cn2>0))
            {
                if(T[j] == '#')
                    cn2++;
                else
                    cn2--;
                j-- ;
            }
            if (i < 0 || j < 0) return i == j;
            if (S[i--] != T[j--]) return false;            
        }
        
        return i == j;
    }
};

