实现两个method，一个是void add interval(int from, 
int to), 另一个是int getTotalLength()返回已有interval的总时间，当然，要考虑
overlapping。比如(1,5), (2, 6)的total length 是5. 

用bst, 每个节点存interval［low, high］。所要维护的属性是树里的父节点的low要
大于左子节点的high，父节点的high要小于右子节点的low。 每次插入新节点的时候比
较路径节点上的interval， 并且更新插入节点的low／high值. 比如输入节点为［1,5
］, ［7,9］, ［6,13］, ［4,7］。
插入第一个节点时，树结构为 ［1，5］； 
插入第二个节点时，树结构为  
                         ［1， 5］
                                ［7，9］
插入第三个节点时，树结构为   
                         ［1， 5］
                                  ［7， 9］
                             ［6， 7］  ［9， 13］  

[6, 13]与［7，9］比较的时候会裂变成两个节点：［6， 7］， ［9， 13］。

插入第四个节点时，树结构为  
                        ［1， 5］
                                 ［7， 9］
                              ［6， 7］  ［9， 13］
                           ［5， 6］
［4，7］与［1，5］比较的时候会变成［5，7］；［5，7］与［6，7］比较的时候会变
成［5，6］

每次插入复杂度为o(logN), 最后算总长度，遍历一次树就行，复杂度为o(N). 这个解
法有点类似于skyline的bst解法， http://www.shadabahmed.com/blog/2013/04/24/skyline-algorithm-a-binary-tree-approach/. 不同的是 skyline 的线段有不同的高度，这里的险段的高度默认为1.
