Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
   
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode* p = head;
        for(int i=1; i<m-1; i++)
            p = p->next;
        
        ListNode* cur = p->next;
        for(int i=m; i<n; i++)
        {
            ListNode* t = cur->next;
            cur->next = t->next;
            t->next = p->next;
            p->next = t;
        }
        
        return head;
    }
};
